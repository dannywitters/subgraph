// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrizePoolIncreased extends ethereum.Event {
  get params(): PrizePoolIncreased__Params {
    return new PrizePoolIncreased__Params(this);
  }
}

export class PrizePoolIncreased__Params {
  _event: PrizePoolIncreased;

  constructor(event: PrizePoolIncreased) {
    this._event = event;
  }

  get dailyId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get weeklyId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get monthlyId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get uid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SettledDailyPrize extends ethereum.Event {
  get params(): SettledDailyPrize__Params {
    return new SettledDailyPrize__Params(this);
  }
}

export class SettledDailyPrize__Params {
  _event: SettledDailyPrize;

  constructor(event: SettledDailyPrize) {
    this._event = event;
  }

  get dailyId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get param1(): Array<SettledDailyPrizeParam1Struct> {
    return this._event.parameters[1].value.toTupleArray<
      SettledDailyPrizeParam1Struct
    >();
  }
}

export class SettledDailyPrizeParam1Struct extends ethereum.Tuple {
  get dateId(): Bytes {
    return this[0].toBytes();
  }

  get rank(): i32 {
    return this[1].toI32();
  }

  get prize(): BigInt {
    return this[2].toBigInt();
  }

  get postId(): BigInt {
    return this[3].toBigInt();
  }

  get user(): Address {
    return this[4].toAddress();
  }

  get postsContract(): Address {
    return this[5].toAddress();
  }
}

export class SettledMonthlyPrize extends ethereum.Event {
  get params(): SettledMonthlyPrize__Params {
    return new SettledMonthlyPrize__Params(this);
  }
}

export class SettledMonthlyPrize__Params {
  _event: SettledMonthlyPrize;

  constructor(event: SettledMonthlyPrize) {
    this._event = event;
  }

  get monthlyId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get param1(): Array<SettledMonthlyPrizeParam1Struct> {
    return this._event.parameters[1].value.toTupleArray<
      SettledMonthlyPrizeParam1Struct
    >();
  }
}

export class SettledMonthlyPrizeParam1Struct extends ethereum.Tuple {
  get dateId(): Bytes {
    return this[0].toBytes();
  }

  get rank(): i32 {
    return this[1].toI32();
  }

  get prize(): BigInt {
    return this[2].toBigInt();
  }

  get postId(): BigInt {
    return this[3].toBigInt();
  }

  get user(): Address {
    return this[4].toAddress();
  }

  get postsContract(): Address {
    return this[5].toAddress();
  }
}

export class SettledWeeklyPrize extends ethereum.Event {
  get params(): SettledWeeklyPrize__Params {
    return new SettledWeeklyPrize__Params(this);
  }
}

export class SettledWeeklyPrize__Params {
  _event: SettledWeeklyPrize;

  constructor(event: SettledWeeklyPrize) {
    this._event = event;
  }

  get weeklyId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get param1(): Array<SettledWeeklyPrizeParam1Struct> {
    return this._event.parameters[1].value.toTupleArray<
      SettledWeeklyPrizeParam1Struct
    >();
  }
}

export class SettledWeeklyPrizeParam1Struct extends ethereum.Tuple {
  get dateId(): Bytes {
    return this[0].toBytes();
  }

  get rank(): i32 {
    return this[1].toI32();
  }

  get prize(): BigInt {
    return this[2].toBigInt();
  }

  get postId(): BigInt {
    return this[3].toBigInt();
  }

  get user(): Address {
    return this[4].toAddress();
  }

  get postsContract(): Address {
    return this[5].toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserUpvote extends ethereum.Event {
  get params(): UserUpvote__Params {
    return new UserUpvote__Params(this);
  }
}

export class UserUpvote__Params {
  _event: UserUpvote;

  constructor(event: UserUpvote) {
    this._event = event;
  }

  get voterAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creatorAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MokaToken__dailyPrizeOutcomeResult {
  value0: Bytes;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;

  constructor(
    value0: Bytes,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class MokaToken__monthlyPrizeOutcomeResult {
  value0: Bytes;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;

  constructor(
    value0: Bytes,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class MokaToken__weeklyPrizeOutcomeResult {
  value0: Bytes;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;

  constructor(
    value0: Bytes,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class MokaToken extends ethereum.SmartContract {
  static bind(address: Address): MokaToken {
    return new MokaToken("MokaToken", address);
  }

  POST_PRICE(): i32 {
    let result = super.call("POST_PRICE", "POST_PRICE():(uint8)", []);

    return result[0].toI32();
  }

  try_POST_PRICE(): ethereum.CallResult<i32> {
    let result = super.tryCall("POST_PRICE", "POST_PRICE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  VOTE_PRICE(): i32 {
    let result = super.call("VOTE_PRICE", "VOTE_PRICE():(uint8)", []);

    return result[0].toI32();
  }

  try_VOTE_PRICE(): ethereum.CallResult<i32> {
    let result = super.tryCall("VOTE_PRICE", "VOTE_PRICE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyPrizeOutcome(
    param0: Bytes,
    param1: BigInt
  ): MokaToken__dailyPrizeOutcomeResult {
    let result = super.call(
      "dailyPrizeOutcome",
      "dailyPrizeOutcome(bytes32,uint256):(bytes32,uint8,uint256,uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MokaToken__dailyPrizeOutcomeResult(
      result[0].toBytes(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_dailyPrizeOutcome(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<MokaToken__dailyPrizeOutcomeResult> {
    let result = super.tryCall(
      "dailyPrizeOutcome",
      "dailyPrizeOutcome(bytes32,uint256):(bytes32,uint8,uint256,uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MokaToken__dailyPrizeOutcomeResult(
        value[0].toBytes(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  dailyPrizeRewards(param0: Bytes): BigInt {
    let result = super.call(
      "dailyPrizeRewards",
      "dailyPrizeRewards(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_dailyPrizeRewards(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyPrizeRewards",
      "dailyPrizeRewards(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mokaPostsContract(): Address {
    let result = super.call(
      "mokaPostsContract",
      "mokaPostsContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_mokaPostsContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mokaPostsContract",
      "mokaPostsContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  monthlyPrizeOutcome(
    param0: Bytes,
    param1: BigInt
  ): MokaToken__monthlyPrizeOutcomeResult {
    let result = super.call(
      "monthlyPrizeOutcome",
      "monthlyPrizeOutcome(bytes32,uint256):(bytes32,uint8,uint256,uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MokaToken__monthlyPrizeOutcomeResult(
      result[0].toBytes(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_monthlyPrizeOutcome(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<MokaToken__monthlyPrizeOutcomeResult> {
    let result = super.tryCall(
      "monthlyPrizeOutcome",
      "monthlyPrizeOutcome(bytes32,uint256):(bytes32,uint8,uint256,uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MokaToken__monthlyPrizeOutcomeResult(
        value[0].toBytes(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  monthlyPrizeRewards(param0: Bytes): BigInt {
    let result = super.call(
      "monthlyPrizeRewards",
      "monthlyPrizeRewards(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_monthlyPrizeRewards(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "monthlyPrizeRewards",
      "monthlyPrizeRewards(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  weeklyPrizeOutcome(
    param0: Bytes,
    param1: BigInt
  ): MokaToken__weeklyPrizeOutcomeResult {
    let result = super.call(
      "weeklyPrizeOutcome",
      "weeklyPrizeOutcome(bytes32,uint256):(bytes32,uint8,uint256,uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MokaToken__weeklyPrizeOutcomeResult(
      result[0].toBytes(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_weeklyPrizeOutcome(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<MokaToken__weeklyPrizeOutcomeResult> {
    let result = super.tryCall(
      "weeklyPrizeOutcome",
      "weeklyPrizeOutcome(bytes32,uint256):(bytes32,uint8,uint256,uint256,address,address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MokaToken__weeklyPrizeOutcomeResult(
        value[0].toBytes(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  weeklyPrizeRewards(param0: Bytes): BigInt {
    let result = super.call(
      "weeklyPrizeRewards",
      "weeklyPrizeRewards(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_weeklyPrizeRewards(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "weeklyPrizeRewards",
      "weeklyPrizeRewards(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreatePostCall extends ethereum.Call {
  get inputs(): CreatePostCall__Inputs {
    return new CreatePostCall__Inputs(this);
  }

  get outputs(): CreatePostCall__Outputs {
    return new CreatePostCall__Outputs(this);
  }
}

export class CreatePostCall__Inputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }

  get _post(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tags(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class CreatePostCall__Outputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPostsContractCall extends ethereum.Call {
  get inputs(): SetPostsContractCall__Inputs {
    return new SetPostsContractCall__Inputs(this);
  }

  get outputs(): SetPostsContractCall__Outputs {
    return new SetPostsContractCall__Outputs(this);
  }
}

export class SetPostsContractCall__Inputs {
  _call: SetPostsContractCall;

  constructor(call: SetPostsContractCall) {
    this._call = call;
  }

  get _mokaPostsContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPostsContractCall__Outputs {
  _call: SetPostsContractCall;

  constructor(call: SetPostsContractCall) {
    this._call = call;
  }
}

export class SettleDailyPrizeCall extends ethereum.Call {
  get inputs(): SettleDailyPrizeCall__Inputs {
    return new SettleDailyPrizeCall__Inputs(this);
  }

  get outputs(): SettleDailyPrizeCall__Outputs {
    return new SettleDailyPrizeCall__Outputs(this);
  }
}

export class SettleDailyPrizeCall__Inputs {
  _call: SettleDailyPrizeCall;

  constructor(call: SettleDailyPrizeCall) {
    this._call = call;
  }

  get _dailyId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get settledPosts(): Array<SettleDailyPrizeCallSettledPostsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SettleDailyPrizeCallSettledPostsStruct
    >();
  }
}

export class SettleDailyPrizeCall__Outputs {
  _call: SettleDailyPrizeCall;

  constructor(call: SettleDailyPrizeCall) {
    this._call = call;
  }
}

export class SettleDailyPrizeCallSettledPostsStruct extends ethereum.Tuple {
  get dateId(): Bytes {
    return this[0].toBytes();
  }

  get rank(): i32 {
    return this[1].toI32();
  }

  get prize(): BigInt {
    return this[2].toBigInt();
  }

  get postId(): BigInt {
    return this[3].toBigInt();
  }

  get user(): Address {
    return this[4].toAddress();
  }

  get postsContract(): Address {
    return this[5].toAddress();
  }
}

export class SettleMonthlyPrizeCall extends ethereum.Call {
  get inputs(): SettleMonthlyPrizeCall__Inputs {
    return new SettleMonthlyPrizeCall__Inputs(this);
  }

  get outputs(): SettleMonthlyPrizeCall__Outputs {
    return new SettleMonthlyPrizeCall__Outputs(this);
  }
}

export class SettleMonthlyPrizeCall__Inputs {
  _call: SettleMonthlyPrizeCall;

  constructor(call: SettleMonthlyPrizeCall) {
    this._call = call;
  }

  get _monthlyId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get settledPosts(): Array<SettleMonthlyPrizeCallSettledPostsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SettleMonthlyPrizeCallSettledPostsStruct
    >();
  }
}

export class SettleMonthlyPrizeCall__Outputs {
  _call: SettleMonthlyPrizeCall;

  constructor(call: SettleMonthlyPrizeCall) {
    this._call = call;
  }
}

export class SettleMonthlyPrizeCallSettledPostsStruct extends ethereum.Tuple {
  get dateId(): Bytes {
    return this[0].toBytes();
  }

  get rank(): i32 {
    return this[1].toI32();
  }

  get prize(): BigInt {
    return this[2].toBigInt();
  }

  get postId(): BigInt {
    return this[3].toBigInt();
  }

  get user(): Address {
    return this[4].toAddress();
  }

  get postsContract(): Address {
    return this[5].toAddress();
  }
}

export class SettleWeeklyPrizeCall extends ethereum.Call {
  get inputs(): SettleWeeklyPrizeCall__Inputs {
    return new SettleWeeklyPrizeCall__Inputs(this);
  }

  get outputs(): SettleWeeklyPrizeCall__Outputs {
    return new SettleWeeklyPrizeCall__Outputs(this);
  }
}

export class SettleWeeklyPrizeCall__Inputs {
  _call: SettleWeeklyPrizeCall;

  constructor(call: SettleWeeklyPrizeCall) {
    this._call = call;
  }

  get _weeklyId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get settledPosts(): Array<SettleWeeklyPrizeCallSettledPostsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SettleWeeklyPrizeCallSettledPostsStruct
    >();
  }
}

export class SettleWeeklyPrizeCall__Outputs {
  _call: SettleWeeklyPrizeCall;

  constructor(call: SettleWeeklyPrizeCall) {
    this._call = call;
  }
}

export class SettleWeeklyPrizeCallSettledPostsStruct extends ethereum.Tuple {
  get dateId(): Bytes {
    return this[0].toBytes();
  }

  get rank(): i32 {
    return this[1].toI32();
  }

  get prize(): BigInt {
    return this[2].toBigInt();
  }

  get postId(): BigInt {
    return this[3].toBigInt();
  }

  get user(): Address {
    return this[4].toAddress();
  }

  get postsContract(): Address {
    return this[5].toAddress();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpvotePostCall extends ethereum.Call {
  get inputs(): UpvotePostCall__Inputs {
    return new UpvotePostCall__Inputs(this);
  }

  get outputs(): UpvotePostCall__Outputs {
    return new UpvotePostCall__Outputs(this);
  }
}

export class UpvotePostCall__Inputs {
  _call: UpvotePostCall;

  constructor(call: UpvotePostCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpvotePostCall__Outputs {
  _call: UpvotePostCall;

  constructor(call: UpvotePostCall) {
    this._call = call;
  }
}
