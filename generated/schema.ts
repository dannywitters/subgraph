// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PostDayMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewards", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostDayMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PostDayMapping entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PostDayMapping", id.toString(), this);
    }
  }

  static load(id: string): PostDayMapping | null {
    return changetype<PostDayMapping | null>(store.get("PostDayMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get posts(): Array<string> | null {
    let value = this.get("posts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set posts(value: Array<string> | null) {
    if (!value) {
      this.unset("posts");
    } else {
      this.set("posts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewards(): BigInt {
    let value = this.get("rewards");
    return value!.toBigInt();
  }

  set rewards(value: BigInt) {
    this.set("rewards", Value.fromBigInt(value));
  }
}

export class PostWeekMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewards", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostWeekMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PostWeekMapping entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PostWeekMapping", id.toString(), this);
    }
  }

  static load(id: string): PostWeekMapping | null {
    return changetype<PostWeekMapping | null>(store.get("PostWeekMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get posts(): Array<string> | null {
    let value = this.get("posts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set posts(value: Array<string> | null) {
    if (!value) {
      this.unset("posts");
    } else {
      this.set("posts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewards(): BigInt {
    let value = this.get("rewards");
    return value!.toBigInt();
  }

  set rewards(value: BigInt) {
    this.set("rewards", Value.fromBigInt(value));
  }
}

export class PostMonthMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewards", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostMonthMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PostMonthMapping entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PostMonthMapping", id.toString(), this);
    }
  }

  static load(id: string): PostMonthMapping | null {
    return changetype<PostMonthMapping | null>(
      store.get("PostMonthMapping", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get posts(): Array<string> | null {
    let value = this.get("posts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set posts(value: Array<string> | null) {
    if (!value) {
      this.unset("posts");
    } else {
      this.set("posts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewards(): BigInt {
    let value = this.get("rewards");
    return value!.toBigInt();
  }

  set rewards(value: BigInt) {
    this.set("rewards", Value.fromBigInt(value));
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("upvotes", Value.fromBigInt(BigInt.zero()));
    this.set("monthId", Value.fromString(""));
    this.set("weekId", Value.fromString(""));
    this.set("dayId", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("post", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Post entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get upvotes(): BigInt {
    let value = this.get("upvotes");
    return value!.toBigInt();
  }

  set upvotes(value: BigInt) {
    this.set("upvotes", Value.fromBigInt(value));
  }

  get monthId(): string {
    let value = this.get("monthId");
    return value!.toString();
  }

  set monthId(value: string) {
    this.set("monthId", Value.fromString(value));
  }

  get weekId(): string {
    let value = this.get("weekId");
    return value!.toString();
  }

  set weekId(value: string) {
    this.set("weekId", Value.fromString(value));
  }

  get dayId(): string {
    let value = this.get("dayId");
    return value!.toString();
  }

  set dayId(value: string) {
    this.set("dayId", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get post(): string {
    let value = this.get("post");
    return value!.toString();
  }

  set post(value: string) {
    this.set("post", Value.fromString(value));
  }

  get tags(): Array<string> | null {
    let value = this.get("tags");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tags(value: Array<string> | null) {
    if (!value) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromStringArray(<Array<string>>value));
    }
  }

  get upvotedUsers(): Array<string> | null {
    let value = this.get("upvotedUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set upvotedUsers(value: Array<string> | null) {
    if (!value) {
      this.unset("upvotedUsers");
    } else {
      this.set("upvotedUsers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get payouts(): Array<string> | null {
    let value = this.get("payouts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set payouts(value: Array<string> | null) {
    if (!value) {
      this.unset("payouts");
    } else {
      this.set("payouts", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenRewards", Value.fromBigInt(BigInt.zero()));
    this.set("tokenSpent", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get posts(): Array<string> | null {
    let value = this.get("posts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set posts(value: Array<string> | null) {
    if (!value) {
      this.unset("posts");
    } else {
      this.set("posts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get upvotes(): Array<string> | null {
    let value = this.get("upvotes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set upvotes(value: Array<string> | null) {
    if (!value) {
      this.unset("upvotes");
    } else {
      this.set("upvotes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get upvotesBy(): Array<string> | null {
    let value = this.get("upvotesBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set upvotesBy(value: Array<string> | null) {
    if (!value) {
      this.unset("upvotesBy");
    } else {
      this.set("upvotesBy", Value.fromStringArray(<Array<string>>value));
    }
  }

  get payouts(): Array<string> | null {
    let value = this.get("payouts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set payouts(value: Array<string> | null) {
    if (!value) {
      this.unset("payouts");
    } else {
      this.set("payouts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get activity(): Array<string> | null {
    let value = this.get("activity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set activity(value: Array<string> | null) {
    if (!value) {
      this.unset("activity");
    } else {
      this.set("activity", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokenRewards(): BigInt {
    let value = this.get("tokenRewards");
    return value!.toBigInt();
  }

  set tokenRewards(value: BigInt) {
    this.set("tokenRewards", Value.fromBigInt(value));
  }

  get tokenSpent(): BigInt {
    let value = this.get("tokenSpent");
    return value!.toBigInt();
  }

  set tokenSpent(value: BigInt) {
    this.set("tokenSpent", Value.fromBigInt(value));
  }
}

export class UserActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserActivity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserActivity", id.toString(), this);
    }
  }

  static load(id: string): UserActivity | null {
    return changetype<UserActivity | null>(store.get("UserActivity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get post(): string | null {
    let value = this.get("post");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set post(value: string | null) {
    if (!value) {
      this.unset("post");
    } else {
      this.set("post", Value.fromString(<string>value));
    }
  }

  get upvote(): string | null {
    let value = this.get("upvote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set upvote(value: string | null) {
    if (!value) {
      this.unset("upvote");
    } else {
      this.set("upvote", Value.fromString(<string>value));
    }
  }

  get reward(): string | null {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reward(value: string | null) {
    if (!value) {
      this.unset("reward");
    } else {
      this.set("reward", Value.fromString(<string>value));
    }
  }
}

export class Upvote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("post", Value.fromString(""));
    this.set("postId", Value.fromString(""));
    this.set("voter", Value.fromString(""));
    this.set("voterId", Value.fromString(""));
    this.set("creator", Value.fromString(""));
    this.set("creatorId", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Upvote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Upvote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Upvote", id.toString(), this);
    }
  }

  static load(id: string): Upvote | null {
    return changetype<Upvote | null>(store.get("Upvote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get post(): string {
    let value = this.get("post");
    return value!.toString();
  }

  set post(value: string) {
    this.set("post", Value.fromString(value));
  }

  get postId(): string {
    let value = this.get("postId");
    return value!.toString();
  }

  set postId(value: string) {
    this.set("postId", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value!.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get voterId(): string {
    let value = this.get("voterId");
    return value!.toString();
  }

  set voterId(value: string) {
    this.set("voterId", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get creatorId(): string {
    let value = this.get("creatorId");
    return value!.toString();
  }

  set creatorId(value: string) {
    this.set("creatorId", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Leaderboard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("reward", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Leaderboard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Leaderboard entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Leaderboard", id.toString(), this);
    }
  }

  static load(id: string): Leaderboard | null {
    return changetype<Leaderboard | null>(store.get("Leaderboard", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value!.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get payouts(): Array<string> {
    let value = this.get("payouts");
    return value!.toStringArray();
  }

  set payouts(value: Array<string>) {
    this.set("payouts", Value.fromStringArray(value));
  }
}

export class LeaderboardPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("leaderboardId", Value.fromString(""));
    this.set("rank", Value.fromI32(0));
    this.set("user", Value.fromString(""));
    this.set("post", Value.fromString(""));
    this.set("reward", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LeaderboardPayout entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LeaderboardPayout entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LeaderboardPayout", id.toString(), this);
    }
  }

  static load(id: string): LeaderboardPayout | null {
    return changetype<LeaderboardPayout | null>(
      store.get("LeaderboardPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get leaderboardId(): string {
    let value = this.get("leaderboardId");
    return value!.toString();
  }

  set leaderboardId(value: string) {
    this.set("leaderboardId", Value.fromString(value));
  }

  get rank(): i32 {
    let value = this.get("rank");
    return value!.toI32();
  }

  set rank(value: i32) {
    this.set("rank", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get post(): string {
    let value = this.get("post");
    return value!.toString();
  }

  set post(value: string) {
    this.set("post", Value.fromString(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value!.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }
}
