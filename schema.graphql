type PostDayMapping @entity {
  id: ID!
  posts: [Post!] @derivedFrom(field: "dayId")
  rewards: BigInt!
}

type PostWeekMapping @entity {
  id: ID!
  posts: [Post!] @derivedFrom(field: "weekId")
  rewards: BigInt!
}

type PostMonthMapping @entity {
  id: ID!
  posts: [Post!] @derivedFrom(field: "monthId")
  rewards: BigInt!
}

type Post @entity {
  id: ID!
  upvotes: BigInt!
  monthId: PostMonthMapping!
  weekId: PostWeekMapping!
  dayId: PostDayMapping!
  timestamp: BigInt!
  user: User!
  post: String!
  tags: [String!]
  upvotedUsers: [Upvote!] @derivedFrom(field: "post")
  payouts: [LeaderboardPayout!] @derivedFrom(field: "post")
}

type User @entity {
  id: ID!
  posts: [Post!] @derivedFrom(field: "user")
  upvotes: [Upvote!] @derivedFrom(field: "voter")
  upvotesBy: [Upvote!] @derivedFrom(field: "creator")
  payouts: [LeaderboardPayout!] @derivedFrom(field: "user")
  activity: [UserActivity!] @derivedFrom(field: "user")
  tokenRewards: BigInt!
  tokenSpent: BigInt!
}

type UserActivity @entity {
  id: ID!
  type: String!
  user: User!
  timestamp: BigInt!
  post: Post
  upvote: Upvote
  reward: LeaderboardPayout
}

type Upvote @entity {
  id: ID!
  post: Post!
  postId: String!
  voter: User!
  voterId: String!
  creator: User!
  creatorId: String!
  timestamp: BigInt!
}

type Leaderboard @entity {
  id: ID!
  reward: BigInt!
  payouts: [LeaderboardPayout!]! @derivedFrom(field: "leaderboardId")
}

type LeaderboardPayout @entity {
  id: ID!
  type: String!
  leaderboardId: Leaderboard!
  rank: Int!
  user: User!
  post: Post!
  reward: BigInt!
}